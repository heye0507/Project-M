
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: jupyter_notebooks/Test_trainer.ipynb

from clasi_user.interface import *

class Trainer():
    '''Take interface, which is preprocessed data
        create learner base on the data
        save the model in the dest
    '''
    def __init__(self,data,model_path,pre_trained=True,model_dir=None):
        self.interface = data
        self.pre_trained = pre_trained
        if not os.path.exists(self.interface.csv_path/'models'):
            os.makedirs(self.interface.csv_path/'models')
        self.dest = self.interface.csv_path/'models'
        self.url = model_path/'general-clasifier-0.84'

    def _create_leaner(self,one_data):
        learn = text_classifier_learner(one_data,AWD_LSTM,drop_mult=0.5,
                                loss_func=FlattenedLoss(LabelSmoothingCrossEntropy),
                                metrics=[accuracy], #FBeta(beta=1)
                                model_dir = self.dest
                               )
        if torch.cuda.is_available():
            learn.to_fp16()
        learn.load(self.url)
        learn.freeze_to(-1)
        return learn

    def train_individual_clasifier(self):
        num_models = len(self.interface.data_list)
        counter_to_print = 0
        print('Creating models... total job =',num_models)
        for data in self.interface.data_list:
            print(f'Creating model #{counter_to_print+1}...')
            learn = self._create_leaner(data)
            learn.fit_one_cycle(1,1e-1,moms=(0.8,0.7))
            current_valid_score = learn.recorder.metrics[0][0].item()
            model_path = learn.save(f'{self.interface.dataset_name[counter_to_print]}_{current_valid_score:.2f}',
                                    return_path=True, with_opt=False)
            print(f'Model saved at {model_path}')
            counter_to_print += 1
