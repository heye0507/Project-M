{"data_points": [{"body": "I don't really think R53 counts as AWS lock-in. If you move to another cloud platform you can move DNS/registrar pretty easily.", "source": "reddit", "embedding": [], "label": 1}, {"body": "Move aside Netlify, I am switching to @zeithq for my deployments. Thank you @coetry and @dustint314 for in-depth walkthrough. Thanks to Zeit for enhancing the curriculum for Web app deployment at Lambda School.", "source": "twitter", "embedding": [], "label": 1}, {"body": "... and here is a simple #awscdk (infrastructure as code) example that explains how to use #GitHubActions for continuous deployments to AWS. https://t.co/FsTMODek2Z", "source": "twitter", "embedding": [], "label": 1}, {"body": "Advance your skillset with this e-book from Packt and learn how to:\n\u2705Improve the efficiency and security of containers \n\u2705Monitor and secure your deployments \n\u2705Build highly available and scalable Kubernetes clusters \nLearn more: https://t.co/W4gjpPaBII", "source": "twitter", "embedding": [], "label": 0}, {"body": "08-21 13:43 - 'Which is your favorite Linux Desktop and why ?' (self.linux) by /u/Cloud_Strifeeee removed from /r/linux within 452-462min -- '''\n\n**1)** Which is your favorite Linux Desktop and why ?\n\n**2)** Do you love or hate systemd and do you feel the controversy is over now ? do you miss the old day or you prefer it now ?\n\n**3)** What you run at your job Centos/RedHat or Ubuntu or something else ? Which you prefer or feel is more powerful / stable ?\n\n**4)** Can you do all the same advanced things in AWS with Linux than you can with Azure in term of features set, programming, iso image etc etc ?\n\n**5)** What's the best Alternative in the Linux world to a Office 365 cloud setup ?\n\n'''\n\n[Which is your favorite Linux Desktop and why ?](https://reddit.com//r/linux/comments/ctcn5v)\n\n[Go1dfish undelete link](http://r.go1dfish.me/r/linux/comments/ctcn5v)\n\n[unreddit undelete link](https://unreddit.com/r/linux/comments/ctcn5v)\n\nAuthor: /u/Cloud_Strifeeee", "source": "reddit", "embedding": [], "label": 1}, {"body": "@kelseyhightower @kolencherry What existing projects/services enable GitOps? We\u2019re a gitlab shop with kubernetes wired up to manage deployments, but we have to code execution on a case by case basis and we manually apply networking changes via cli.", "source": "twitter", "embedding": [], "label": 1}, {"body": "@NiranEC @stu @mattliebowitz @aaronbuley @vtimd Cant do 1 cloud right, let alone VM deployments under 30 days, so sure multi-cloud is right up your alley!", "source": "twitter", "embedding": [], "label": 0}, {"body": "Just last saturday, I tried to take an application which prominently featured a &quot;Run on Heroku&quot; button and test a bug locally.<p>For the life of me, I could not figure out to go from the button-based(apparently automatically inferred by Heroku?) deployment to a local Procfile-based deployment.<p>It was faster to rely on the alternatively provided Dockerfile to start a local deployment and hope that it was as up-to-date as the Heroku setup.<p>I find the idea of one-click deployments really appealing, but Heroku&#x27;s vendor-lock-in-based implementation really turned me off their service.", "source": "hn", "embedding": [], "label": 1}, {"body": "Attending a real honest talk about Kubernetes operators by @adamsand0r  at the @DomCode meetup. This sentence sums up my love and hate for Kubernetes: \"That doesn't make it easy btw\" https://t.co/9HEjB1v6yI", "source": "twitter", "embedding": [], "label": 1}, {"body": "I\u2019ll second this.<p>I work on a selection of internal applications and services and we run everything with Dokku. I was skeptical at first because it made initial deployments a bit of a pain, but I\u2019ve been converted. Not sure I\u2019d run everything that way but for small-scale applications it\u2019s a breeze. And because you have to do the sysadmin work yourself it\u2019s a bit more flexible than Heroku.", "source": "hn", "embedding": [], "label": 1}, {"body": "and even when i tried to look androgynous bc i was super dysphoric and thought it aws the only way, people still never asked. even when trying to pass so hard, i was still just a grl. i fricking hate that.", "source": "twitter", "embedding": [], "label": 1}, {"body": "Automating Kerberos KeyTab Generation for Kubernetes-based Deployments https://t.co/VeNY73U6VQ https://t.co/Yp5B1UVpnb", "source": "twitter", "embedding": [], "label": 0}, {"body": "I am #hiring Systems Engineers! If you are passionate about building tools &amp; automation to support multi cloud deployments for stateful workloads on kubernetes, public cloud with spinnaker, please DM me.", "source": "twitter", "embedding": [], "label": 0}, {"body": "Once again failing to find a nice way of making the AWS IoT Device SDK available in the browser. Being to forced to use their browserize aproach just sucks: https://t.co/Bv5ly6vQ5A", "source": "twitter", "embedding": [], "label": 1}, {"body": "\ufffd\ufffdNEWS FLASH! Internet Economy Foundation &amp; @RolandBerger report (co. @ComputerWeekly) suggests public sector orgs should take steps to prevent a #cloud computing oligopoly that would leave orgs at greater risk of vendor lock-in https://t.co/ojfktDTDOC https://t.co/5vWOFNm1W4", "source": "twitter", "embedding": [], "label": 0}, {"body": "1) Which is your favorite Linux Desktop and why ? 2) Do you love or hate systemd and do you feel the controversy is over now ? do you miss the old day or you prefer it now ? 3) What you run at your job Centos/RedHat or Ubuntu or something else ? Which you prefer or feel is more powerful / stable ? 4) Can you do all the same advanced things in AWS with Linux than you can with Azure in term of features set, programming, iso image etc etc ? 5) What's the best Alternative in the Linux world to a Office 365 cloud setup ? submitted by Cloud_Strifeeee [link] [comments] \n\nsubmission.num_comments --&gt;", "source": "reddit", "embedding": [], "label": 1}, {"body": "Hate to play favourites, but out of a absolutely stellar lineup this talk on microservices and serverless by @samnewman https://t.co/WM5ZjdiZEO", "source": "twitter", "embedding": [], "label": 1}, {"body": "If i could have the AD integration provided by Azure along with its RBAC, Resource groups and ARM added to EC2, S3,  LambDA and API Gateway from AWS then i would have the perfect cloud platform. Multi-Cloud deployments are the way to go.....", "source": "twitter", "embedding": [], "label": 1}, {"body": "Which AWS service allows you to automatically deploy a large number of docker containers? -- First of all I would like to say that I am really new to Amazon AWS and I have finally decided to give it a try.  \nSo please bear with me if I cannot understand some realatively easy concepts or if I am missing something abvious.  \nI have an application which is divided into two parts.\n\n1. MASTER: Tells what kind of data should be created and then consumes them.\n2. Slave: Creates the requested data by the master and dies off.\n\nMASTER, depending on the amount of data it may request, may need 1 to 1000+ SLAVE to consume the necessary data and create a meaningful result. For this reason I decided to put them in their respective containers for scaling purposes.   \n\n\nSo my questions are the following:\n\n1. Which amazon services may be able to host such an app (app normally will not run 24/7, and may need to scale a lot horisontally)\n2. Does the service allows the creation of a script that:\n   1. Start 1 MASTER and n numbers of  SLAVES\n   2. Put on each MASTER and SLAVE a predefined command to execute before running the container (all the slaves have the same command)  \n\n\nFrom my finding I see two main services that may cover such need:\n\n1. EC2 \n2. Fargate\n\nBut EC2 looks complicated for a begginer, and at first glance Fargate does not seem to havy any automation solution to deploy the containers with the predefined steps.  \nThank you in advance for the help!", "source": "reddit", "embedding": [], "label": 1}, {"body": "@awscloud #awssupport It would be great and educational as well,  if aws blog posts have minimum IAM policies necessary for the use case described, rather than applying full service access and then a disclaimer proclaiming, \"not recommended for production deployments\". https://t.co/cveoRaDXbd", "source": "twitter", "embedding": [], "label": 1}, {"body": "Today we are announcing the distributed version of TimescaleDB, which is currently in private beta (public version slated for later this year).TimescaleDB, a time-series database on PostgreSQL, has been production-ready for over two years, with millions of downloads and production deployments worldwide. Today, for the first time, we are publicly sharing our design, plans, and benchmarks for the distributed version of TimescaleDB.PostgreSQL is making an undeniable comebackFirst released 30+ years ago, PostgreSQL today is making an undeniable comeback. It is the fastest growing database right now, faster than MongoDB, Redis, MySQL, and others. PostgreSQL itself has also matured and broadened in capabilities, thanks to a core group of maintainers and a growing community. Yet if one main criticism of PostgreSQL exists, it is that horizontally scaling out workloads to multiple machines is quite challenging. While several PostgreSQL projects have developed scale-out options for OLTP workloads, time-series workloads, which we specialize in, represent a different kind of problem.Problem: time-series workloads are differentSimply put, time-series workloads are different than typical database (OLTP) workloads. This is for several reasons: writes are insert, not update heavy, and those inserts are typically to recent time ranges; reads are typically on continuous time-ranges, not random; writes and reads typically happen independently, rarely in the same transaction. Also, time-series insert volumes tend to be far higher and data tends to accumulate far more quickly than in OLTP. So scaling writes, reads, and storage is a standard concern for time series. These were the same principles upon which we developed and first launched TimescaleDB two years ago. Since then, developers all over the world have been able to scale a single TimescaleDB node, with replicas for automated failover, to 2 million metrics per second and 10s of terabytes of data storage. This has worked quite well for the vast majority of our users. But of course, workloads grow and software developers (including us!) always want more. What we need is a distributed system on PostgreSQL for time-series workloads.Solution: Chunking, not shardingOur new distributed architecture, which a dedicated team has been hard at work developing since last year, is motivated by a new vision: scaling to over 10 million metrics a second, storing petabytes of data, and processing queries even faster via better parallelization. Essentially, a system that can grow with you and your time-series workloads.Most database systems that scale-out to multiple nodes rely on horizontally partitioning data by one dimension into shards, each of which can be stored on a separate node.We chose not to implement traditional sharding for scaling-out TimescaleDB. Instead, we embraced a core concept from our single-node architecture: the chunk. Chunks are created by automatically partitioning data by multiple dimensions (one of which is time). This is done in an fine-grain way such that one dataset may be comprised of 1000s of chunks, even on a single node. Unlike sharding, which typically only enables scale-out, chunking is quite powerful in its ability to enable a broad set of capabilities. For example:Scale-up (on same node) and scale-out (across multiple nodes)Elasticity: Adding and deleting nodes by having data grow onto new nodes and age out of old onesPartitioning flexibility: Changing the chunk size, or partitioning dimensions, without downtime (e.g., to account for increased insert rates or additional nodes)Data retention policies: Deleting chunks older than a thresholdData tiering: Moving older chunks from faster, expensive storage to cheaper, slower storageData reordering: Writing data in one order (e.g., by time) based on write patterns, but then rewriting it later in another order (e.g., device_id) based on query patterns Shards Chunks Creation Typically manual Automatic Number &lt; 10 per node 100-1000s per node Scale-out Yes Yes Scale-up No Yes Elasticity No Yes Partitioning flexibility No Yes Data retention policies No Yes Data tiering No Yes Data reordering No Yes A much more detailed discussion is later in this post.BenchmarksWhile we plan to start publishing more benchmarks over the next few months, we wanted to share some early results demonstrating our distributed architecture\u2019s ability to sustain high write rates. As you can see, at 9 nodes the system achieves an insert rate well over 12 million metrics a second:TimescaleDB running the open-source Time Series Benchmarking Suite, deployed on AWS running m5.2xlarge data nodes and a m5.12xlarge access node, both with standard EBS gp2 storage. More on access and data nodes later in the post.Next stepsThis multi-node version of TimescaleDB is currently in private beta. If you\u2019d like to join the private beta, please fill out this form. You can also view the documentation here. The rest of this post describes the underlying design principles of our distributed architecture and how it works. There is also a FAQ at the end of the post with answers to questions we commonly hear about this architecture. Please continue reading to learn more.The five objectives of database scalingBased on our own experience, combined with our interactions with TimescaleDB users, we have identified five objectives for scaling a database for time-series workloads:Total storage volume: Scaling to larger amounts of data under managementInsert rate: Supporting higher ingestion rates of rows or datapoints per secondQuery concurrency: Supporting larger numbers of concurrent queries, sometimes via data replicationQuery latency: Reducing the latency to access a large volume of data to handle a single query, typically through query parallelizationFault tolerance: Storing the same portion of data on multiple servers/disks, with some automation for failover in case of failureToday, TimescaleDB leverages PostgreSQL streaming replication for primary/replica clustering: There is a single primary node that accepts all writes, which then streams its data (more specifically, its Write Ahead Log) to one or more replicas. But ultimately, TimescaleDB using PostgreSQL streaming replication requires that each replica store a full copy of the dataset, and the architecture maxes out its ingest rate at the primary\u2019s write rate and its query latency at a single node\u2019s CPU/IOPS rate.While this architecture has worked well so far for our users, we can do even better.Designing for ScaleIn computer science, the key to solving big problems is breaking them down into smaller pieces and then solving each of those sub-problems, preferably, in parallel. In TimescaleDB, chunking is the mechanism by which we break down a problem and scale PostgreSQL for time-series workloads. More specifically, TimescaleDB already automatically partitions a table across multiple chunks on the same instance, whether on the same or different disks. But managing lots of chunks (i.e., \u201csub-problems\u201d) can also be a daunting task so we came up with the hypertable abstraction to make partitioned tables easy to use and manage. Now, in order to take the next step and scale to multiple nodes, we are adding the abstraction of a distributed hypertable. Fortunately, hypertables extend naturally to multiple nodes: instead of creating chunks on the same instance, we now place them across different instances.Still, distributed hypertables pose new challenges in terms of management and usability when operating at scale. To stay true to everything that makes hypertables great, we carefully designed our system around the following principles.Design PrinciplesUse existing abstractions: Hypertables and chunking extend naturally to multiple nodes. By building on these existing abstractions, together with existing PostgreSQL capabilities, we provide a robust and familiar foundation for scale-out clustering. Be transparent: From a user's perspective, interacting with distributed hypertables should be akin to working with regular hypertables, e.g., familiar environment, commands, functionality, metadata, and tables. Users need not be aware that they are interacting with a distributed system and should not need to take special actions when doing so (e.g., application-aware shard management).Scale access and storage independently: Given that access and storage needs vary across workloads (and time), the system should be able to scale access and storage independently. One way of doing this is via two types of database nodes, one for external access (\u201caccess node\u201d) and another for data storage (\u201cdata node\u201d).Be easy to operate: A single instance should be able to function as either an access node or data node (or even both at the same time), with sufficient metadata and discovery to allow each node to play its necessary role.Be easy to expand: It should be easy to add new nodes to the system to increase capacity, including upgrading from a single-node deployment (in which a single instance should seamlessly become a data node in a multi-node deployment).Provide flexibility in data placement: The design should account for data replication and enable the system to have significant flexibility in data placement. Such flexibility can support collocated JOIN optimizations, heterogeneous nodes, data tiering, AZ-aware placement, and so forth. An instance serving as an access node should also be able to act as a data node, as well as store non-distributed tables.Support production deployments: The design should support high-availability deployments, where data is replicated across multiple servers and the system automatically detects and transparently recovers from any node failures. Now, let\u2019s understand how our distributed architecture begins to follow these principles in practice.Introducing Distributed HypertablesFollowing the above design principles, we built a multi-node database architecture that allows hypertables to distribute across m", "source": "reddit", "embedding": [], "label": 1}, {"body": "@inurashii Kubernetes was the ancient Roman goddess of obnoxiously helpful things you depend on, but still mostly hate. \n\n(Hers was a wide-ranging purview)", "source": "twitter", "embedding": [], "label": 1}, {"body": "I tried installing applications and aws performance was awful on the micro tier.", "source": "reddit", "embedding": [], "label": 1}, {"body": "In a kubernetes environment with many microservices instances, memory density matters. I've spoken with folks who have been asked to reduce their microservice memory footprint in Kubernetes deployments so they do not have to grow their in-house Kubernetes clusters. Quarkus / Micronaut can save real $$.", "source": "reddit", "embedding": [], "label": 1}, {"body": "Recommended read on @Medium: \u201cBuild Your Own EC2 Machine Images with Packer &amp; Ansible on AWS for Immutable AWS Deployments\u201d https://t.co/NpLqRvrogT", "source": "twitter", "embedding": [], "label": 1}, {"body": "@mavi888uy Hi. is there currently a built-in way to perform Blue/Green deployments with serverless-appsync-plugin?", "source": "twitter", "embedding": [], "label": 1}, {"body": "I like what you\u2019ve done and where you\u2019re headed. It looks like a similar path to many others.  Can I recommend you give the repo-first approach a look? \n\nFor an ops guy, starting with infra and moving left makes sense. When you talk to devops guys, they\u2019ll be like \u201cyeah, that\u2019s some good infra\u201d. \n\nWhen you talk tondevelopes, they\u2019ll be like \u201cwhat? Who cares? Is that something I need to do?\u201d And the answer should be \u201cwell, it\u2019s my job so I thought you\u2019d be interested but nobody cares and you don\u2019t need to do anything because of the abstractions.\u201d\n\nI suggest using the developers side of devops now that you have the backend nailed down. Most devs approach it using a gitlab runner or Travis approach, where they put the pipeline in the repo and it does the builds, tests, and deployments. \n\nThe developers enjoy the abstractions available but also the flexibility to adjust and enhance their pipelines as the project revolves and test cases are added and security scans are refined. A lot less hand-holding from ops than the Jenkins or AWS pipeline approach where everything is a drop down and requires consensus building (change management) before adjustment.", "source": "reddit", "embedding": [], "label": 1}, {"body": "@Devs; feedback in general and re: singles -- A little about me: long time lurker, occasional shit-poster of server down memes and TF (before we needed to add #s to them -- think \u201cThe Great War\u201d) is probably my favorite game still.\n\n**On Apex Legends, in general:**\n\nI like the game and throw some coin at it to access the season pass (well, I earned my season 2 pass from season 1 but i paid money at some point!).  It\u2019s a free game that\u2019s incredibly well put together with game-changing mechanics (who else had a ping system?); played PUBG for a while when it was in beta and played Fortnite for 20 minutes (that\u2019s all I could do -- I tried), so I have some battle royal experience.\n\nI spend most of my days in AWS and do servers go down that are being beaten to death?  Yes.  Does it suck?  Yes.  Is there a point to getting butt-hurt because you can\u2019t play a free game for the X minutes (hell, even hours) it\u2019s unavailable at certain points? No.  It\u2019s not.  Go outside or talk to a human or play with your pets or play one of your other games (I don\u2019t play a lot of games but I have a shit-ton just sitting on Xbox begging for my attention).\n\nYes, an argument could be made that the infra could be made more robust and scale better but IT\u2019S A FREE GAME.  No one is forced to pay to play; you\u2019re paying to get cosmetics which don\u2019t impact the game (ok, 99% of cosmetics don\u2019t impact the game) and if you choose to buy stuff, that\u2019s your choice.  This game was incredible since day 1, sans beta!!\n\nWishlist: Add all the attachments to the shooting range\n\n**On Singles mode:**\n\nI love this mode, even with the occasional gang-bang I run into.  I suck at FPS on console (my thumbs don\u2019t get it) and this has helped improve my Apex game tremendously both from not trying to melee while shooting (I mash buttons; I know there\u2019s a setting for this but I like melee where it is) to staying on-target (biggest issue), even more so than playing TF (which is fairly easy to drop someone) and definitely more than the training mode where I know that the target is moving left-to-right at X speed.\n\nI don\u2019t know that I\u2019d place it on the same level in terms of rewards that team play is but definitely keep some version; this is a training God-send!\n\n**Life, in general:**\n\nSo to the devs and the Respawn team I say keep up the good work and that I\u2019m *PATIENTLY* waiting for TF3 (please make it cost something and put it towards infra; I hate the free model).\n\nIf you hate this game and you hate EA and you hate Respawn, stop playing the game and stop the whining shit-posting in this sub (my shit-posts are at least funny); it takes more energy for you to complain about it than move on.\n\nBest to all.", "source": "reddit", "embedding": [], "label": 0}, {"body": "Learn how to drive efficient deployments with Kata Containers by taking \"Oracle Linux Cloud Native Environment\" training: https://t.co/knBeuVUvaB https://t.co/VK04opfCY2", "source": "twitter", "embedding": [], "label": 1}, {"body": "Serverless pain points @BretMcG. Vendor lock-in is a big concern to people. I think the benefits may outweigh the risk https://t.co/eKkh95TZN9", "source": "twitter", "embedding": [], "label": 1}, {"body": "Deep magic from solution architect Mark Brooks: how to automate #Kerberos keytab generation for Kubernetes-based @StreamSets Data Collector deployments. #k8s  https://t.co/FSklU96QS4 https://t.co/RNXnPr95IA", "source": "twitter", "embedding": [], "label": 0}, {"body": "Something rock or metal so my awful singing would not ruin my chances. I'd call \u00d6rs from AWS for good advice \ud83d\ude04 https://t.co/O3ttXgPbQS", "source": "twitter", "embedding": [], "label": 1}, {"body": "Machine Learning \u2014 Cloud-Native Model Deployments https://t.co/BP6GKpLzXJ #python #ansible #devops #linux #netdevops", "source": "twitter", "embedding": [], "label": 0}, {"body": "@traewinter It's not too complicated. Though I got some of our Docker experts here to get me up and running. Once you get your head around the basics it's alright.", "source": "twitter", "embedding": [], "label": 1}, {"body": "Hey there, Jitsi dev here.\n\nWe only maintain Debian / Ubuntu packages so I really encourage you to use them because they are battle tested (it is what we run in production at meet.jit.si and other deployments).\n\nIf you have another OS as your base, is Docker an option for you? See: https://github.com/jitsi/docker-jitsi-meet", "source": "reddit", "embedding": [], "label": 0}, {"body": "\n**1)** Which is your favorite Linux Desktop and why ?\nGnome. It has flaws like not having per dir settings in Nautilus, or settings that really should be in the official settings app instead of gnome-tweaks and a few more but other than that it's great.\n\n**2)** Do you love or hate systemd and do you feel the controversy is over now ? do you miss the old day or you prefer it now ?\nAs a developer I love systemd's service system \n\n**3)** What you run at your job Centos/RedHat or Ubuntu or something else ? Which you prefer or feel is more powerful / stable ?\nI run redhat on the server, ubuntu/windows for dev\n\n**4)** Can you do all the same advanced things in AWS with Linux than you can with Azure in term of features set, programming, iso image etc etc ?\nProbably but I haven't worked with aws\n\n**5)** What's the best Alternative in the Linux world to a Office 365 cloud setup ?\nDon't know", "source": "reddit", "embedding": [], "label": 1}, {"body": "IBM's Mahmoud Elmashni shares how companies can modernize with multicloud and hybrid cloud deployments powered by...\u2026 https://t.co/7UwbPy8XnE", "source": "twitter", "embedding": [], "label": 1}, {"body": "@simonw The problem with \"don't use serverless, it's lock-in!\" is taht it lumps all tech in together. S3 is serverless - so you don't want to use that then?", "source": "twitter", "embedding": [], "label": 1}, {"body": "@brianleroux \ud83e\udd37\u200d\u2642\ufe0f A $7 / m Heroku Dyno can easily serve 10b requests per month.", "source": "twitter", "embedding": [], "label": 1}, {"body": "I hate AWS based unit tests and especially mocking them.  Takes so much time to find correct responses in AWS docs and use them in your code when mocking.", "source": "twitter", "embedding": [], "label": 1}, {"body": "@notatallshaw @simonw Not sure what you consider to be the quintessential example, but some other examples would be NextDoor, Robin Hood, Mondo (https://t.co/i8FsfHa4Fx).\n\nA significant percentage of startups over past 5-10 yrs appear to be running on AWS and I haven't heard lock-in nightmare tales.", "source": "twitter", "embedding": [], "label": 1}, {"body": "@awscloud when are we getting an update on ASPNET.Core for serverless deployments? 2.1 version is a bit outdated atm.", "source": "twitter", "embedding": [], "label": 1}, {"body": "Why users choose nomad instead of kubernetes ?\nLess features, you must have vault and consul to have more.\n\nFull product become as complicated as kubernetes with less community support, less features, less tools around, no containerd. \n\nSorry @HashiCorp but let Nomad die in peace", "source": "twitter", "embedding": [], "label": 1}, {"body": "Over the past several years, there have been media notices about Amazon AWS servers for several of their paying customers being hacked.  I'm wondering if hackers have broken into Amazon's server space on AWS and generated Amazon gift card codes that are being sold on the dark web.  Amazon might be sitting on it's hands if there's an FBI investigation underway.  I would again suggest that you reach out to your state's Attorney General's Office.  It's a little more complicated now that you've relocated.  You might reach out to both the AG's office in the state you left as well as the AG's office of the state where you live now.  You also have the option of reaching out to the office of Washington state's AG since Amazon's headquarters is in that state and complain about them failing to resolve this matter.  If none of that works, the other option is approaching federal officials since the transaction involved interstate commerce and appears to involve an artifice to defraud using wires (Internet) which would fall under the federal wire fraud statute.  You might consider reaching out to the criminal and antitrust divisions of the US Department of Justice (antitrust will be in charge of the antitrust investigation of the big 3 tech companies and might find issues like this noteworthy even if not directly related to antitrust).  Good luck.", "source": "reddit", "embedding": [], "label": 1}, {"body": "@katieeeeebell How terrible AWS is and how I absolutely hate working with their services", "source": "twitter", "embedding": [], "label": 1}, {"body": "@_JamesWard @brianleroux a $7 heroku dyno does not come with failover, monitoring, auto-scaling, automatic retries in case of errors, configurable throttling, a-b canary deployments; lambda does.", "source": "twitter", "embedding": [], "label": 1}, {"body": "Check out the newly published step-by-step guide on \"Automating Kerberos KeyTab Generation for Kubernetes-based Deployments\" in @streamsets  -- https://t.co/4WIB2qWFx4 | #DataOps #Kubernetes https://t.co/EviITifVpC", "source": "twitter", "embedding": [], "label": 1}, {"body": "To build a decent SaaS product without any lock-in or scalability challenges, you generally need a few things - a fully-managed Kubernetes offering, database as a service (Postgres, MySQL, Redis), a load balancer, and blob storage.", "source": "twitter", "embedding": [], "label": 1}, {"body": "Ask HN: How do you remember how all the config files should be configured? -- There are so many things. Webpack, ESLint, Google Cloud, AWS, tsconfig, and next thousand configs for other tools. I hate it. I always forget how to make it work, usually have to spend tens of minutes, or sometimes hours, browsing the documentation. I just feel extremely unproductive.<p>How do you solve this?", "source": "hn", "embedding": [], "label": 1}, {"body": "We've spent the past 2 years refining our school &amp; office cloud-based phone system deployments and the uptake speaks for itself! #HostedVoice #SchoolVoIP #ISDNSwitchOff https://t.co/XQKthuNXN5", "source": "twitter", "embedding": [], "label": 1}, {"body": "\"The emergence of Kubernetes as a leader for multi-cloud consistent deployments has created a need for a consistent storage backend, and Pure Storage is stepping up to the challenge.\" - @Ned1313 via @GestaltIT  https://t.co/qO6b1n1xsP https://t.co/ro9kWXewTq", "source": "twitter", "embedding": [], "label": 1}, {"body": "\ufffd\ufffdNEWS FLASH! Internet Economy Foundation &amp; @RolandBerger report (co. @ComputerWeekly) suggests public sector orgs should take steps to prevent a #cloud computing oligopoly that would leave orgs at greater risk of vendor lock-in https://t.co/aAGfGbI4Rd https://t.co/9E7kibfaS8", "source": "twitter", "embedding": [], "label": 0}, {"body": "@_msw_ @mahemoff This is a different topic from vendor lock-in, but I would love to see a complete rethink of AWS security to be far easier for people to understand and work with.\n\nI don't know what that would look like - if it was an easy fix it would have been fixed already!", "source": "twitter", "embedding": [], "label": 1}, {"body": "Whether on-premise, multi-tenant, or private #cloudERP, businesses should consider each deployment option and how it aligns with business goals. As an #SAPpartner that handles both on-premise and cloud deployments.\nhttps://t.co/qESMukFbTS", "source": "twitter", "embedding": [], "label": 0}, {"body": "The more I hear about the shit Amazon and by extension AWS is pulling, the more I just hate the company and by extension Jeff Bezos.", "source": "twitter", "embedding": [], "label": 1}, {"body": "The API sucks, too, though, when used from the command line. Every non-automated way of interacting with AWS is like pulling teeth, and in reality most people do this all the time. You can&#x27;t automate a process you&#x27;ve never done manually, and you don&#x27;t necessarily want to invest in building out an automation which you only need to do a few times. It&#x27;s like AWS&#x27;s excuse is &quot;we offload the problem of a good UI onto our users&quot;, which in my opinion is really stupid. All it would take is one UI team which made common tools and standards for UI design and applied them throughout.", "source": "hn", "embedding": [], "label": 1}, {"body": "#AWSCloudMigration can be complicated, but with the help of our guide, you can learn what it takes to successfully migrate your business operations to the cloud. #AWS #AWSPartner #AWSCloud #AWSNews #CloudServices https://t.co/a0Clmf2v2a", "source": "twitter", "embedding": [], "label": 1}, {"body": "Help with USG Pro 4 and CenturyLink DSL w/ PPPoE -- I have a weird issue with my setup today. I'm trying to get my USG Pro 4 to communicate with my Unifi Controller in AWS. \n\nWhile the USG is behind the Centurylink Modem/Router (getting a private IP and the modem handling the PPPoE) it communicates with the controller just fine.  \n\n\nAs soon as I turn the Modem into a transparent bridge and have the USG handle PPPoE, I get internet, but none of my devices are able to communicate with the controller. \n\nThought it was a DNS issue  but other sites are able to reach it and just for kicks, I put in the IP address of my controller instead of domain name. Still nothing.\n\nAm I missing something? I'd hate to get a cloud key for this network if I already got a controller living in the clouds :)", "source": "reddit", "embedding": [], "label": 0}, {"body": "Avoid vendor lock-in and being forced into #Cloud #solutions. Read our blog on an \u201cInnovative Approach to Fund Digital Transformation\u201d to learn more.", "source": "twitter", "embedding": [], "label": 1}, {"body": "As #Kubernetes deployments grow, so do accounting challenges. That's why we released #opensource Project Purser, a cost insight tool for cloud workloads. Learn more: https://t.co/VmBgtHbUab", "source": "twitter", "embedding": [], "label": 1}, {"body": "Docker is nice, but holy Fu** can it be frustrating if you are dealing with uids and gids. Throw in a NFS with a custom export file and I'm ready to hang myself.", "source": "reddit", "embedding": [], "label": 1}, {"body": "Standing room only for @iShrivatsa  and his talk on Terraform and Ansible for application deployments on AWS! #CloudJourneyIO https://t.co/eRJpw89WOn", "source": "twitter", "embedding": [], "label": 1}, {"body": "On point 2. @VauxhallLabour members have specifically asked for AWS and their wishes have been ignored. This in turn is going to put off women from putting themselves forward. Disappointing and frustrating decision by the NEC. https://t.co/1Q7jEYTbRL", "source": "twitter", "embedding": [], "label": 1}, {"body": "If you haven\u2019t considered yet, try booting it up in docker. I had these same issues installing Spark a while back, and was driving myself insane. Then I booted it up in a container and all the problems went away (install requirement wise at least, which to me are the most frustrating).", "source": "reddit", "embedding": [], "label": 1}, {"body": "Today was better got to actually work through 4 or 5 tickets. Anyone trying to use WSL with Docker for Desktop and a JS builder like yarn just don't fucking do it if your networks are complicated in any way. Massive ballache.", "source": "twitter", "embedding": [], "label": 1}, {"body": "How does maintaining isolated function perimeters help to secure cloud function deployments?\n\nWe cover that and many other best practices in the 10 Serverless Security cheat sheet https://t.co/U7t22cCSzU https://t.co/HEO0VdpcyO", "source": "twitter", "embedding": [], "label": 1}, {"body": "Getting real tired of the Linux fallacy of \u201ca million ways to do something, and they\u2019re all wrong\u201d. Documentation, binaries, Docker, Vagrant... random guides online... there\u2019s like 5 different ways I tried to get an evaluation instance of Fleet running and just failed. Hate it.", "source": "twitter", "embedding": [], "label": 1}, {"body": "@mjasay @kelseyhightower Time will tell -  Sure it's hard, technology continues to make it easier. It's not in the $$$ interests of the major cloud providers to advocate multi deployments, even if thats what makes sense for customers.", "source": "twitter", "embedding": [], "label": 1}, {"body": "How to group by keyed_groups from AWS ec2 sourced inventory -- Hello!\n\nI am currently able to use Ansible and the ec2 plugin without issue from the CLI to do\ndeployments to specific inventory groups using keyed_groups. \n\nUsing keyed groups, we have a tag called \u201cinventory_groups\u201d which is a list, and each value becomes a separate inventory group. However \nI\u2019ve gone through the documentation and can not find the way to do keyed groups within AWX when importing inventory from AWS EC2.\n\nHas anyone done keyed_groups before and knows what variables I need to supply to get it working...?\n\nThanks in advance!", "source": "reddit", "embedding": [], "label": 1}, {"body": "@iM4CH3T3 Any version where they have removed the frost bar/ docker ? I hate that thing", "source": "twitter", "embedding": [], "label": 1}, {"body": "1-click deployments of #voila applications to Heroku with the jupyterlab-heroku extension for JupyterLab.\n\nFor more details: https://t.co/yV4c7RoLtM https://t.co/t76kpsbm4W", "source": "twitter", "embedding": [], "label": 1}, {"body": "@ThePracticalDev @yangshunz @digitalfreepen @figmadesign @yashints @awscloud @jazzdan shares 7 areas that make developing on k8s tough and frustrating at times. \n\nWhile I haven't worked on k8s yet, some of the issues seemed very similar to those working with Docker containers on local setups.\n\nhttps://t.co/w7VWngecxo (4/n)", "source": "twitter", "embedding": [], "label": 1}, {"body": "White-label/private cloud -- What's everyone using for Cloud services these days?\nAzure and AWS seem to be more complicated than they need to be for small deployments.\nOne of our vendors recommended OrionVM, anyone have any experience with them?\nWe have had a couple experiences with Sherweb and have not been impressed there.", "source": "reddit", "embedding": [], "label": 1}, {"body": "\u2705@BluzelleHQ operates across many clouds and does not lock-in customers to any specific cloud infrastructure. \n\n\ud83d\udd0eRead more\ud83d\udcdc:\n\n\u27a1\ufe0fhttps://t.co/JE6bi6pKm2\u2b05\ufe0f\n\nDecentralized Database #CloudComputing #AWS #GoogleCloud Azure Hybrid Crypto Blockchain\n\n\ud83d\udd34\u25b6\ufe0f: https://t.co/XvSqMn3qpT https://t.co/ccwG0073t5", "source": "twitter", "embedding": [], "label": 1}, {"body": "I'm going to get hate for pointing this out, but it needs to be said. \n\nThere is no proof that DDG does or does not track you. However there are plenty of reasons to be skeptical out it. It runs on AWS, is closed source, and is a private American company just to name a few. \n\nNot saying you shouldn't use it. I use it myself at the moment. Just pointing out that there is good potential it doesn't do as it claims. Don't be surprised when actual evidence of them abusing their users comes out.", "source": "reddit", "embedding": [], "label": 0}, {"body": "Recent forecasts predict that by 2022, 75% of all databases will be deployed or migrated to a #cloud platform. Explore why organizations should develop a multi-cloud data management strategy to secure new cloud deployments: https://t.co/mPcSA7kU4q via @InformationWeek https://t.co/SWn5mENKlH", "source": "twitter", "embedding": [], "label": 1}, {"body": "@markrussinovich I would but ... \u201cRoR deployments can be too slow, and it there\u2019s no way to deploy your RoR application to an Azure cloud service from a Mac\u201d.  WTF?", "source": "twitter", "embedding": [], "label": 1}, {"body": "@muhuk A Docker container is the only place for safe and reliable npm deployments. Same for Python pip.", "source": "twitter", "embedding": [], "label": 1}, {"body": "Not really worth it on our build since compilation is not that slow. In my experience, you get the biggest time savings from optimizing the process of gathering dependencies and making tests and deployments faster.<p>With other languages that build dependencies from source, doing that in a separate docker build step would probably be a good idea so you can cache the results as a separate docker layer.", "source": "hn", "embedding": [], "label": 1}, {"body": "I hate unnecessary abstractions. All this &quot;docker functionality&quot; is actually just based on namespaces and cgroups. I get what you&#x27;re trying to say though.", "source": "hn", "embedding": [], "label": 1}, {"body": "@craigcramer @profgalloway Ben's take is thought-provoking as always, but I remain concerned with We's skinny gross margins on mature properties, a weaker moat than characterized, and of course majority voting control by a megalomaniacal CEO.  AWS' risk profile was waayyy lower and customer lock-in higher", "source": "twitter", "embedding": [], "label": 1}, {"body": "\u2705@BluzelleHQ operates across many clouds and does not lock-in customers to any specific cloud infrastructure. \n\n\ud83d\udd0eRead more\ud83d\udcdc:\n\n\u27a1\ufe0fhttps://t.co/pw34OXfET3\u2b05\ufe0f\n\nDecentralized Database #CloudComputing #AWS #GoogleCloud Azure Hybrid Crypto Blockchain\n\n\ud83d\udd34\u25b6\ufe0f: https://t.co/tZOwm6efEy https://t.co/7WFlAKPXQe", "source": "twitter", "embedding": [], "label": 1}, {"body": "Automating Kerberos KeyTab Generation for Kubernetes-based Deployments https://t.co/3aosaD1LsG via @streamsets", "source": "twitter", "embedding": [], "label": 1}, {"body": "@hejsna I hate the AWS console... everything is so complicated.", "source": "twitter", "embedding": [], "label": 1}, {"body": "I fought wildland fires in Alaska this whole years season. I came back from multiple deployments to my house and I could barely breathe because the cloud of smoke was surrounding the city in which I lived. https://t.co/d2Tne4Q5Bs", "source": "twitter", "embedding": [], "label": 0}, {"body": "For Microsoft? Non compliant for corporate use with their other services and products eg Office, Cortana, education etc. Also, was powered by AWS not Azure which sucks if you're MS. https://t.co/ETF3uSzEO9", "source": "twitter", "embedding": [], "label": 1}, {"body": "I know people who proclaim they hate @docker. Not that they ever used it. It's just that they can't mess with live systems anymore.", "source": "twitter", "embedding": [], "label": 1}, {"body": "Which do not fix the fact that Docker sucks.", "source": "reddit", "embedding": [], "label": 1}, {"body": "AWS has data lock-in and offers fundamental capability-altering abilities to its customers. And it can&#x27;t be replicated without a massive influx of capital to jumpstart (Microsoft, Google, etc).<p>WeWork has hundreds of competitors, including every building in a downtown with unused office space, to say nothing of better organized entities.", "source": "hn", "embedding": [], "label": 1}, {"body": "&gt;\tfact, ReactOS and Wine actually share some of the workload between each other,\n\nYes, thats a fact and stated on their website. They share code. I paid for crossover numerous times until they deployed tgat web installer, unforgiving POS that became.\n\n&gt;\tSpeaking of which, what do you want to use ReactOS for? As a Windows replacement because 7 is being deprecated next year and you don\u2019t like 10?\n\nKind of;\nI hated win xp when it cane out, hated it. But grew fond of it, it became the most beloved of OS\u2019 MS ever made.\nI love FOSS, i can\u2019t code for shit but i love the plan of both an alternative, and competition. (User choice)\n\nAs a retro gamer too, old consoles die, and become lost to time.\nHaving a compatability layer, like emulators, is great. Emulators as you know are drop, and go.. got a controller? Plug and play.\nWine, a \u2018translator\u2019 is not as forgiving at all, to the average joe they scratch their head thinking \u201cwhy cant this shit just work?!\u201d \nReactos is simple to everyone because its familiar, start, applications, paint and go!\n\nWine, as clever, is a fickle little bitch and yes, reverse engineering, clean room is fucking hard.\nAs i pointed out in my post, revisions, regressions. While reactos development is slow, is focusing on a different purpose.\n\nI see the view you are going for is a VM vs Docker.\n\nDocker in a way is wine, small, layer to get it going while a VM is a whole system. Each have their purpose (im biased against docker)\n\nSo,\nTo me, FOSS is choice, both have a purpose, both will have their neiche, both will have customers and both will serve the community and allow the community to add, change and do what they wish.\n\nBut I will be clear,\nwindows 10 is great for average joe users but its the most fucking pain in the arse system for power users. A recent Linus tech tips video made me laugh (asmuch as i hate that dunce) \u201cback in the day when you could right click network settings near the clock and make changes\u201d\n\nWould I run a whole OS for one game?\nYes I would, Command and Conquer for many years was NOT forgiving when it came to windows xp and networking (built on ipx)\nThen CnC net modders made it compatible.\n\nTo this day, DOS, still rock that. I know i can dosbox but actually networking in native dos is fun.\n\nExperience, choice, whatever.\n\nBut you are escaping my point..\nWine is not a superior product, it is an alternative product.\nWhich is why, as per my original post, it shits me people make it to be this great big thing to solve all their issues, because like Docker, it wont, but i am happy users have options.\n\nBiased opinion; i dislike that reactos is focusing on BTRFS, id rather it have something like ext4 or xfs support but thats just me and my views, i won\u2019t force my views on others, just ask that wine be brought down to an equal dull roar.", "source": "reddit", "embedding": [], "label": 0}, {"body": "We\u2019ve just added log streams to the #nuvla UI, so we can better understand what our #Docker deployments are doing without having to log into the infrastructure. Thanks to our community for requesting this simple yet very useful feature. Coming soon on https://t.co/d2qZmwXhpP.", "source": "twitter", "embedding": [], "label": 1}, {"body": "Thanks. So this CVE is truly \"affects ALL\" deployments of Kubernetes.", "source": "reddit", "embedding": [], "label": 1}, {"body": "Illumina, the Leading Producer of DNA Sequencers, Implements #Docker, #Kubernetes, and Rancher to Support 300 Developers and 14 Production Deployments. @illumina #containers #opensource https://t.co/ozwsX6yGOC", "source": "twitter", "embedding": [], "label": 1}, {"body": "Is #OpenStack ever cheaper than #AWS EC2? Mirantis created a TCO Calculator based on aggregate data from more than 200 deployments implemented across 30,000 physical hosts. Try it yourself and see \ud83d\udc4c https://t.co/6n5G8ecIcj https://t.co/pr8phThzZy", "source": "twitter", "embedding": [], "label": 1}, {"body": "Used to hate Azure.\n\nSo started to try and port some of my personal projects from AWS to Azure to explore it more.\n\nNow I hate both Azure and myself \ud83e\udd18", "source": "twitter", "embedding": [], "label": 1}, {"body": "@ImplausibleGrrl @RobynSaysBlerg I would offer to help them with a migration to an AWS auto scalable system but then... as they explicitly hate my entire existence... I think not... and I would be charging them a lot more than $110", "source": "twitter", "embedding": [], "label": 1}, {"body": "Deploying with Confidence\u200a\u2014\u200aMinimize Risk, Maximize Resiliency With Canary Deployments on AWS by Iftikhar Khan https://t.co/er90lRlNyB", "source": "twitter", "embedding": [], "label": 1}, {"body": "Switched to Heroku deployments via CircleCI.", "source": "twitter", "embedding": [], "label": 1}, {"body": "If there is no framework yet for the serverless (I hate that word) pattern, then perhaps there is no need for it. AWS lambda has a very small API you'd have to implement and serverless is only a sane approach for extreme scalability requirements, where you usually code only a small fraction of your application as a lambda and serve the rest of it via s3 or a traditional web application. Serverless way is too expensive for anything else and the valid use cases for it are quite specific.", "source": "reddit", "embedding": [], "label": 1}, {"body": "\"The emergence of Kubernetes as a leader for multi-cloud consistent deployments has created a need for a consistent storage backend, and Pure Storage is stepping up to the challenge.\" - @Ned1313 via @GestaltIT  https://t.co/C0yquBCI6u https://t.co/pjrqXjX3yY", "source": "twitter", "embedding": [], "label": 1}, {"body": "@WyriHaximus &gt; Note that we still have to support ZTS mode, because that's all windows has, so it's not going anywhere.\n\nAs a Windows user, I hate seeing PHP being held back by Windows. Vagrant, Docker, VirtualBox, VMware, Firecracker. So many options. PHP should stop supporting Windows.", "source": "twitter", "embedding": [], "label": 1}, {"body": "How does maintaining isolated function perimeters help to secure cloud function deployments?\n\nWe cover that and many other best practices in the 10 Serverless Security cheat sheet https://t.co/gy0rdqCDiu https://t.co/1Yg7lUex2m", "source": "twitter", "embedding": [], "label": 1}, {"body": "\u2705@BluzelleHQ operates across many clouds and does not lock-in customers to any specific cloud infrastructure. \n\n\ud83d\udd0eRead more\ud83d\udcdc:\n\n\u27a1\ufe0fhttps://t.co/AeOtmTbAe3\u2b05\ufe0f\n\nDatabase CloudComputing AWS GoogleCloud Azure Hybrid #Crypto #Blockchain #Developers \n\n\ud83d\udd34\u25b6\ufe0f: https://t.co/2nUirjG6KA https://t.co/2egUKLsa62", "source": "twitter", "embedding": [], "label": 1}, {"body": "@jacksimone78 I know there is a place for IIS in the web server world but there's a reason Linux servers are so popular and why Azure and .NET Core focus on Docker and Linux deployments too. I think Windows Server is better suited to things such as Active Directory etc.", "source": "twitter", "embedding": [], "label": 0}, {"body": "\"The emergence of Kubernetes as a leader for multi-cloud consistent deployments has created a need for a consistent storage backend, and Pure Storage is stepping up to the challenge.\" - @Ned1313 via @GestaltIT  https://t.co/SojKUXtPui https://t.co/PjtYxXH9Zz", "source": "twitter", "embedding": [], "label": 1}, {"body": "\u2705@BluzelleHQ operates across many clouds and does not lock-in customers to any specific cloud infrastructure. \n\n\ud83d\udd0eRead more\ud83d\udcdc:\n\n\u27a1\ufe0fhttps://t.co/sB00P7fjoq\u2b05\ufe0f\n\nDecentralized Database CloudComputing #AWS #GoogleCloud #Azure Hybrid Crypto Blockchain\n\n\ud83d\udd34\u25b6\ufe0f: https://t.co/HpmtvFcFnb https://t.co/LL2yyE8iVw", "source": "twitter", "embedding": [], "label": 1}, {"body": "Seamlessly manage campus-wide #WiFi deployments and distributed multi-site #networks from a single pane-of-glass using #Meraki Cloud Managed Security: https://t.co/b7wkvQa7PZ\ud83d\udea9\n\n#CloudManagedSecurity #Meraki_solutions #CiscoMeraki https://t.co/E5xHQC9BpX", "source": "twitter", "embedding": [], "label": 1}, {"body": "&gt; To make sure our servers/databases can handle all requests we use kubernetes\n\nSo I'm guessing you sharded your database and can just add new shards whenever you want to?\n\nI'm currently at a point where the write lock on the database is the bottleneck. I can scale up the deployments to accommodate a lot more requests but when they all have to go through the same database I'm sort of fucked.", "source": "reddit", "embedding": [], "label": 0}, {"body": "Solved! 5 days later. Not compatible with the newest version of Ruby, switched to Ruby 4.2.1 instead. I hate this aspect of tech. Dependency hell. The problem was temporary solved by accident several days ago, then stopped working yesterday. Was about switch to Docker.", "source": "twitter", "embedding": [], "label": 1}, {"body": "@TheEnterprisersProject shares these 11 interesting stats about how organizations use multiple cloud services. Spoiler alert: multi-cloud deployments, and Kubernetes are here to stay. #Network #Architecture #Hybrid #Cloud #Deployment #IT #Infrastructure https://t.co/h2Nj7Sp2jJ", "source": "twitter", "embedding": [], "label": 1}, {"body": "There\u2019s a right and even necessary level of lock-in. Productivity is why we have chosen AWS ECS over Kubernetes, for example. https://t.co/EYKlNXHyea", "source": "twitter", "embedding": [], "label": 1}, {"body": "IBM Cloud Kubernetes Service \u2013Multi-Zone Region (MZR) Deployments https://t.co/q8fLZ7X6zL", "source": "twitter", "embedding": [], "label": 1}, {"body": "Deploying with Confidence\u200a\u2014\u200aMinimize Risk, Maximize Resiliency With Canary Deployments on AWS by Iftikhar Khan https://t.co/guXnxB2Tkp", "source": "twitter", "embedding": [], "label": 0}, {"body": "Deploy NestJS Serverless Apps to Azure Functions by @kammysliwiec\n\n https://t.co/ghBQNZsGfW #NestJS #Azure #Deployments via @trilon_io", "source": "twitter", "embedding": [], "label": 1}, {"body": "StatCast powered by AWS confirms that Boston sucks.", "source": "reddit", "embedding": [], "label": 1}, {"body": "See how you can automate Microgateway deployments on Kubernetes through CI/CD. https://t.co/W50c2xQrMH. #APIs #Kubernetes", "source": "twitter", "embedding": [], "label": 1}, {"body": "Mitigating serverless lock-in fears | ThoughtWorks https://t.co/8SmWOeUvKz", "source": "twitter", "embedding": [], "label": 1}, {"body": "1) Which is your favorite Linux Desktop and why ? 2) Do you love or hate systemd and do you feel the controversy is over now ? do you miss the old day or you prefer it now ? 3) What you run at your job Centos/RedHat or Ubuntu or something else ? Which you prefer or feel is more powerful / stable ? 4) Can you do all the same advanced things in AWS with Linux than you can with Azure in term of features set, programming, iso image etc etc ? 5) What's the best Alternative in the Linux world to a Office 365 cloud setup ? submitted by Cloud_Strifeeee [link] [comments] \n\nsubmission.num_comments --&gt;", "source": "reddit", "embedding": [], "label": 1}, {"body": "@zeithq Do Zeit NOW deployments support clustering? I'm working with @pusher for socket support and their API offers clustering. Is it possible, currently, to utilize this functionality via Lambda deployments?", "source": "twitter", "embedding": [], "label": 1}, {"body": "My opinion is kubernetes will position you better for the future since it has cluster features like deployments (deploy 5 of this container, etc), migration scenarios, test strategies, and isolation thru namespaces. And with K8s in Docker, KIND, most of it can be developed on a single laptop.", "source": "reddit", "embedding": [], "label": 1}, {"body": "@samnewman My argument isn't \"avoid serverless\" - it's \"go into this with your eyes open and don't assume vendor lock-in won't ever be an issue\"", "source": "twitter", "embedding": [], "label": 1}, {"body": "@brunoborges @sallar I hate docker concept. Makes devs sloppy - nowdays they don't even bother to put together decent \"source install\" instruction anymore - \"Hey, install docker, pull that image, run it\". Makes it also extremely hard to contribute to the project/adjust it to your personal taste.", "source": "twitter", "embedding": [], "label": 1}, {"body": "Those materials are fine. Make sure you understand reserved instances and the basic tools and concepts of accounting on AWS.  Accounting is easy points if you know the high level stuff, and I regretted not better reviewing it before the exam. I passed all the associate level stuff (92,93,87) a few months back and the sysops questions were funny by comparison. It was/is as though the tests were written by people with different mentalities - I found the sysops test to be very easy to pass, but the questions were either simple or impossible based on my study materials. From the exams I took before the sysops, the questions breakdown was like 50 percent easy, 30 medium, and maybe 10 percent hard. The remaining 10 percent were things you'd only know if you had knowledge from the professional exam or other courses. The sysops was like 60-70 easy, 15 medium, and 15 percent were where the heck is this covered. All I'm getting at with these numbers is, don't feel awful when you go in there and miss the first 10+ questions. Some of it is unscored, and some of it is from professional courses.  You're probably not going to know it. The trolls who wrote the CSA pro questions sprinkled a little bit of their love onto the sysops exam, so read the whole thing and read it super carefully. Never assume anything, and read it all.", "source": "reddit", "embedding": [], "label": 0}, {"body": "@syntaxfm @stolinski @wesbos youse should probably talk about docker and something like compose for your deployment episode (mentioned on this week's potluck). I'm personally for vendor neutral solutions when it comes for deployments", "source": "twitter", "embedding": [], "label": 1}, {"body": "Most of my stuff is set to latest accept for a few projects that have specific stable branch tags. Even some of those might use 2.X and 3.X as stable branches. \n\nThe inconsistency sucks. \n\nI run watchtower on one of my docker servers and go latest all the way and on another I only do manual pulls. \n\nAll depends on what it is I am running.", "source": "reddit", "embedding": [], "label": 1}, {"body": "#JavaWorld #Java #Automated | Love the simplicity of function-as-a-service but hate the setup process? Look to these projects to ease AWS Lambda deployments https://t.co/4wQih91i4M", "source": "twitter", "embedding": [], "label": 1}, {"body": "Possibly overrated weapons | The BFG 50 | Episode 4 -- So, this Overrated weapons series is supposed to be written by u/Quantum_Shade, but I think he's never going to finish it, because it was 5 months before last time he posted on the series, so I decided to finish it for him. You're welcome Quantum.\n\n**So, without further ado, let's jump right in! (Youtube background music starts to play)**\n\n# Ok before we start there is an important announcement for the mods: Ryan or AIned or other mods reading this, please do not remove this because of rule 4, I know the overration of BFG is often talked about but this took me some time and it's actually has a lot of in-depth reviews that are different than others so don't remove this for rule 4.\n\nBack.\n\nToday we are talking about the myth, the legend, the one-shot sniper and probably the most iconic thing on Phantom forces...\n\n**\\*Inhales a small scent of Australien + Frutino hoozer\\*(credits to Proodos for giving me the recipe)**\n\n**\\*Takes a deep breath\\***\n\n(In a deep and clear voice)\n\n**THE BFG 50*****-50-50***(echo continues for a couple more seconds)\n\nSo, first of all, this gun isn't really \"overrated as of right now\", but a couple of years ago you can barely turn the corner without a Po\\_ke fan carrying this gun to snipe you before the last shot from your PDW can hit your enemy's torso.\n\nIn fact, so many people used it that a huge hate began to build around it, and Redditors here are spamming stuff like \"BFG 50 + BT is cancer\" and rants. Any player here who played in 2018 or before know what i'm talking about. Somehow the trend for using the BFG died around 2019. I don't know why. But like I said, It was so overrated in the past few years that It was a necessity for the series. I don't know why Quantum didn't do an episode on this.\n\n**Note I'm writing this in a 2017-2018 perspective, so if anything's old and outdated, don't be alarmed**.\n\n&amp;#x200B;\n\nStats-\n\nDamage: 100 - 90\n\nRPM - 30 (don't get fooled by Stylis it's actually 15)\n\nDropoff - 60 studs\n\nAs you can tell right off the bat this thing one-shots. Now some of ya'll might be like, *ey m8 but looong reload yeah?* Debateable, but here's a really good counter for it I found for one of the posts:\n\nWait I forgot the post I'll put it in my own words.\n\nBasically what he said was even though there is a long-reload, most BFG users will be hiding in a protected spot, and even on killcam you can't really tell where he is because all the buildings look the same, also the BFG users tend to duck everytime they fire, meaning that other player can't find him even though the sound is loud. And adding a certain suppressor(I think it's ARS if I'm wrong tell me in the comments) will not change the one-shot ability, so yeah.\n\nThere are a couple of reasons for the overration and the hate.\n\nThe one-shot feature attracts just about every player who doesn't know he'll get flamed. C'mon. I know all of you people definitely would be using it if nobody would flame you for using it.\n\nAnd since killing somebody with this sniper doesn't take a lot of effort(One-shot torse and any range and low bullet drop so BT is actually not needed, I guess it's for really bad people, but believe me once you use AWS you'd be grateful, not back to the topic). So obviously all the rank 70+ are quite upset on how they have to train for so long to be able to calculate bullet drop on certain snipers for the headshots while some rank 20 can just aim at your torso and... ***oof*** .\n\nNow generally the gun being overrated because of the one-shot range and Po\\_ke's fame for using it(if you don't know whos Po\\_ke and don't know he loves the BFG then you shouldn't be on this subreddit). And when a player constantly gets sniped by the same sniper by low ranks they is not meant for low ranks, he's gonna get very upset as time passes by.\n\nNow let's talk about the usage and tactic of the gun and why it's op even with slow reload:\n\nLet's put it in a manual:\n\n***How 2 BFG, by Phillipdev***\n\n1. ***Vote for Mirage.***\n2. ***Deploy.***\n3. ***Go to a roof of a building with over***\n4. ***Find someone you can snipe.***\n5. ***When you find him scope in.***\n6. ***Aim at his torso. Nothing else. Don't even need to calculate bullet drop.***\n7. (For BT users) ***Simply scope in and aim at those yellow diamonds and click at them.***\n8. ***Profit!***\n9. ***After firing, get behind cover and reload***\n10. ***Rinse and repeat!***\n\n ***What you'll probably see:***\n\n**\\[+50\\] Double kill!**\n\n**\\[+100\\] Enemy killed!**\n\n**\\[+0\\] Torso bonus!** \n\n**\\[+100\\] m60main \\[BFG 50\\]**\n\n**THE END**\n\n**Make sure to check out our new book,** ***How 2 m60!*** **At stores near you!**\n\nThere. All summed.\n\n&amp;#x200B;\n\nAnyways, guys, I'm too lazy for an outro, so if you enjoyed please do leave an upvote and make sure to comment down below on what you think! Until next time, Have a great day(or great night considering I live in Asia)!", "source": "reddit", "embedding": [], "label": 0}, {"body": "@simonw Unfortunately it's almost impossible to avoid lock-in once you start using aws/gcp. It's only a matter of time until you tightly integrate with one of their services in a critical part of your code. And they only make it easier. Maintaining own infra is prohibitively expensive.", "source": "twitter", "embedding": [], "label": 1}, {"body": "@brian_pearce And I hate the opposite. AWS, for example, allows these keys now (finally!) but it replaces the virtual 2FA code.", "source": "twitter", "embedding": [], "label": 1}, {"body": "Optimizing for #container and #Cloud deployments - that's what Zing 19.07 is all about! https://t.co/qOk5IQxqLH Performance you need for query-based workloads + Flight Recorder and Zulu Mission Control out of the box #Java #JVM https://t.co/18j2BcRzr5", "source": "twitter", "embedding": [], "label": 0}, {"body": "Looking for affordable and scalable Firebase serverless replacement https://t.co/ckzw1W3TB5\n\nI really like Firebase and all the services they offer, but my main concern is about the vendor lock-in and not having more control of the database. Also when the usage grows it could b\u2026", "source": "twitter", "embedding": [], "label": 1}, {"body": "&gt; First, running data centers is a much bigger challenge [...] than running your own office space.<p>&gt; With the rise of serverless computing and similar technologies, there&#x27;s also the question of utilization. [...] AWS can make a lot of margin by pooling and smoothing demand for those occasional services.<p>I disagree with both points. I&#x27;m a small business owner - I was also a small business owner in 2012. (Two different businesses). One of the biggest changes that have helped me out nowadays vs. back then, is the fact that WeWork exists.<p>In 2013, when we decided we wanted an office, we started to look for one. This was a super long process, and in our specific case we eventually gave up and stayed with a previous arrangement (unimportant to the story - that&#x27;s usually not an option). The reason this was complicated was:<p>1. We needed to actually find a good location and a place \nthat looks decent. This a) took time, and b) wasn&#x27;t easy for a decent price.<p>2. Once renting a place, we&#x27;d need to decorate it &#x2F; etc to make it actually usable - most places aren&#x27;t immediately ready. This also includes furniture&#x2F;etc, without which the space isn&#x27;t useable.<p>3. We&#x27;d also need to take care of a lot of related payments and setup - internet, electricity, etc. Internet alone is annoying, as you have to setup office routers&#x2F;etc.<p>4. To make everything <i>really</i> complicated - we had no idea how much space to get. We were a 10 person company, with plans to grow. But leases are for 2 years - do we get a space for 10? Of course not, if we grow we are in trouble. For 20? That means we&#x27;re paying for a <i>lot</i> of excess space for a few years.<p>Compared to the above, setting up servers is much easier :) And as you can see in point #4, WeWork <i>can</i> smooth out capacity.<p>In contrast, last year my new company (2 people) moved to a WeWork. It took 3 days - we looked at 2 locations (also non WeWork), picked WeWork as it was the best combination of price vs. space provided, and moved in a week later. WE recently grew to 4 people - it took 3 conversations, and we found a new room in the same building that can house 4 people, we moved a week later.", "source": "hn", "embedding": [], "label": 0}, {"body": "\u2705@BluzelleHQ operates across many clouds and does not lock-in customers to any specific cloud infrastructure. \n\n\ud83d\udd0eRead more\ud83d\udcdc:\n\n\u27a1\ufe0fhttps://t.co/UXr2ijQz7s\u2b05\ufe0f\n\nDecentralized Database CloudComputing AWS #GoogleCloud #Azure Hybrid Crypto #Blockchain\n\n\ud83d\udd34\u25b6\ufe0f: https://t.co/0Tpqvu1yax https://t.co/PHOUhm3x6r", "source": "twitter", "embedding": [], "label": 0}, {"body": "Different reasons. \n\n\nFirst Reason - When it first started happening I think it was a bad database issue even though I\u2019d clean and optimize it my Plex has been running for almost 10 years now and it\u2019s a massive database (160K episodes, 75K music, 7K movies). Nothing I did would fix it till I got a new SSD and it seemed fine. When it would crash then, it was just the docker I could stop and restart it. I\u2019ve asked in the forums and not much help but it was running fine so whatever...\n\n\nCurrently - It\u2019s only happened twice, once on the 16th and once on the 20th. Here\u2019s the last code from the system log before it happened...\n\n\n`Aug 20 06:33:36 UNRAIDPLEX kernel: Plex Media Scan[1321]: segfault at 7f1 ip 00001551dc512097 sp 00001551ccbc8ff0 error 4 in libcrypto.so.1.0.0[1551dc401000+204000]`\n\n\r\n`Aug 20 06:33:36 UNRAIDPLEX kernel: Code: 8b 4f 1c 31 d2 4c 89 e0 48 f7 f1 49 8b 07 48 63 ca 4c 8b 2c c8 4d 85 ed 74 37 49 8b 6f 08 48 8d 1c c8 90 49 ff 87 a0 00 00 00 &lt;4d&gt; 39 65 10 75 11 49 ff 47 68 49 8b 7d 00 4c 89 f6 ff d5 85 c0 74`\n\n\nI looked up segfault and from other posts on Reddit it looks like me transcoding to a Ramdisk might be the issue. I have at most usually 15 at max transcodes going so maybe with 32gb if memory that\u2019s not the best? So I moved transcoding from my ram to an SSD like I used to and I\u2019m seeing if it happens again.\n\n\nAlso I run a custom Unraid setup that allows me to Hardware transcoding using my Quadro P2000\n\n\nThat sucks that Unraid stripped that stuff out. I\u2019m not the greatest with Linux so Unraid just works for me.", "source": "reddit", "embedding": [], "label": 0}, {"body": "New open source solution reduces the risks associated with #cloud deployments\nAn open source user computer environment (UCE) for the Amazon #Cloud, called Galahad, has been launched by the Universi ..\nhttps://t.co/4UBOPKwY3r https://t.co/4MKOVc0rqw", "source": "twitter", "embedding": [], "label": 0}, {"body": "I don't know why enterprises are so fearful of \"cloud lock-in\" , when the longest, most costly lock-in you can experience is your own on-premise environment. This goes double for .gov #NASTDannual", "source": "twitter", "embedding": [], "label": 1}, {"body": "@rchrdbyd \u201cCross-account deployments of serverless apps with Code Build and Code Pipeline: the hard parts\u201d", "source": "twitter", "embedding": [], "label": 1}, {"body": "Deep magic from solution architect Mark Brooks: how to automate #Kerberos keytab generation for Kubernetes-based @StreamSets Data Collector deployments. #k8s  https://t.co/DOfrR2kZh3 https://t.co/gRaamzrYTU", "source": "twitter", "embedding": [], "label": 0}, {"body": "Simplifying AWS Fargate deployments with Harness https://t.co/xBYYxMcitw @harnessio", "source": "twitter", "embedding": [], "label": 1}, {"body": "- [Cadaveric blood transplantation](https://en.wikipedia.org/wiki/Cadaveric_blood_transfusion)   \n\nMusste ich erstmal googlen weil ich es nicht vom Wortstamm her glauben wollte. Gibt nicht einmal einen Artikel in einer anderen Sprache weil das jetzt wohl nicht so der Hit ist. Derweil wurde die tats\u00e4chlich relevante Bluttransfusion von einem Briten bzw. sp\u00e4ter einem \u00d6sterreicher erfunden 1901 der das mit den Blutgruppen verstanden hat. Aber gratuliere. Da hat einer echt tief buddeln m\u00fcssen um das zu finden. Ich w\u00fcrde jetzt auch nicht behaupten, dass \"ich das nutze\"...oder irgendjemand.\n\n* [Kidney transplants](https://en.wikipedia.org/wiki/Blood_transfusion#20th_century)   \n\n&gt; One of the earliest mentions about the possibility of a kidney transplant was by American medical researcher Simon Flexner[...]\n&gt; In 1933 surgeon Yuriy Vorony from Kherson in the Soviet Union attempted the first human kidney transplant[...]His first patient died two days later, as the graft was incompatible with the recipient's blood group and was rejected.\n\nBlutgruppen siehe oben und 32 Jahre fr\u00fcher. \n\n&gt; It was not until June 17, 1950, when a successful transplant was performed on Ruth Tucker, a 44-year-old woman with polycystic kidney disease, by Dr. Richard Lawler[5] at Little Company of Mary Hospital in Evergreen Park, Illinois.\n\n* Artificial heart\n\n&gt; The first artificial heart was made by the Soviet scientist Vladimir Demikhov in 1937. It was implanted in a dog.\n\n&gt; On 2 July 1952, 41-year-old Henry Opitek, suffering from shortness of breath, made medical history at Harper University Hospital at Wayne State University in Michigan. The Dodrill-GMR heart machine, considered to be the first operational mechanical heart, was successfully used while performing heart surgery.\n\nWar wohl nicht weit gekommen seit dem Hund. \n\n* AK-47  \n\nKeine Ahnung was das aussagen soll. Wollte da jemand suggerieren, dass die Russen das Sturmgewehr erfunden haben? Ist jedenfalls [falsch](https://en.wikipedia.org/wiki/Assault_rifle#Sturmgewehr_44). \n\n&gt; The Germans were the first to pioneer the assault rifle concept, during World War II, [...]\n\n* [Mobile phone](https://en.wikipedia.org/wiki/Mobile_phone)\n\nWahrscheinlich ist [das](https://en.wikipedia.org/wiki/Leonid_Kupriyanovich) gemeint. \n\n&gt; Also in 1957 he made an experimental model of a wearable automatic mobile phone (\"radiophone\"), called LK-1 (not to be confused with the cancelled Soviet spacecraft of the same name or LK-1 (\u041b\u041a-1) the first Soviet trolleybus). His device consisted of a base station and a portable handset. LK-1 was 3 kg in weight, 20\u201330 km operating distance, and 20\u201330 hours of battery life. Leonid Kupriyanovich patented this mobile phone in 1957 (author's certificate \u2116 115494, 1.11.1957)\n\n[Zig Jahre](https://en.wikipedia.org/wiki/History_of_mobile_phones) vorher im Rest der Welt: \n\n&gt; Beginning in 1918, the German railroad system tested wireless telephony on military trains between Berlin and Zossen.[3] In 1924, public trials started with telephone connection on trains between Berlin and Hamburg. In 1925, the company Zugtelephonie AG was founded to supply train telephony equipment and, in 1926, telephone service in trains of the Deutsche Reichsbahn and the German mail service on the route between Hamburg and Berlin was approved and offered to first-class travelers.[4]\n\nSowie: \n\n&gt; In 1949, AT&amp;T commercialized Mobile Telephone Service. From its start in St. Louis, Missouri, in 1946, AT&amp;T introduced Mobile Telephone Service to one hundred towns and highway corridors by 1948. Mobile Telephone Service was a rarity with only 5,000 customers placing about 30,000 calls each week.\n\n* [Satellite](https://en.wikipedia.org/wiki/Satellite#History) \n\n&gt; The first published mathematical study of the possibility of an artificial satellite was Newton's cannonball, a thought experiment in A Treatise of the System of the World by Isaac Newton.  [...] In May 1946, the United States Air Force's Project RAND released the Preliminary Design of an Experimental World-Circling Spaceship, which stated that \"A satellite vehicle with appropriate instrumentation can be expected to be one of the most potent scientific tools of the Twentieth Century.\"[6] The United States had been considering launching orbital satellites since 1945 under the Bureau of Aeronautics of the United States Navy.\n\nSchon klar, dass das bei den Russen geklappt hatte aber erfunden haben sie es nicht. \n\nund zuletzt: \n\n&gt; [Radial keratotomy](https://en.wikipedia.org/wiki/Radial_keratotomy)\n\n&gt; Radial keratotomy (RK) is a refractive surgical procedure to correct myopia (nearsightedness) that was developed in 1974, by Svyatoslav Fyodorov, a Russian ophthalmologist. It has been largely supplanted by newer operations, such as photorefractive keratectomy, LASIK, Epi-LASIK and the phakic intraocular lens. \n\n\"If you hate Socialism but use any of the following\" \n\nAber ist wahrscheinlich schon \u00e4lter das Bild, konnte auch nicht rausfinden wie lange man das gemacht hat aber sagen wir mal: JA! Das haben die Russen tats\u00e4chlich zur Zeit des Sozialismus erfunden!  \n\nWer war dieser [Fyodorov](https://en.wikipedia.org/wiki/Svyatoslav_Fyodorov) eigentlich? \n\n&gt; In the 1980s through the early 1990s, Fyodorov called for repeal of the Soviet Union's one-party system while still a member of the Communist Party.[4] [...] Considered one of the Soviet Union's first highly successful practicing capitalists, he was a proponent for the denationalization of the economy.\n\nUpsi.\n\nIrgendwie kam mir das alles bekannt vor: https://www.youtube.com/watch?v=IC6W8J0j8Co", "source": "reddit", "embedding": [], "label": 0}, {"body": "\"The emergence of Kubernetes as a leader for multi-cloud consistent deployments has created a need for a consistent storage backend, and Pure Storage is stepping up to the challenge.\" - @Ned1313 via @GestaltIT  https://t.co/Z6WTV8jiMg https://t.co/kgXNdSrezT", "source": "twitter", "embedding": [], "label": 1}, {"body": "How do you fight vendor lock-in? In most of the cases, you fight it the same way you fight monsters under your bed.\n\nArticle by Vacation Tracker's CTO, Slobodan Stojanovic. https://t.co/iiH36dAbpi\n\n#VacationTracker #serverless #vendorlockin #testing", "source": "twitter", "embedding": [], "label": 0}, {"body": "Well in Node, your only unit of concurrency is the OS process, so if you want to scale your app, you need to cluster it to run multiple instances on the same machine. Then to scale beyond that, you need something to manage clusters across multiple machines. That's the fundamental idea at least. There's of course more to it, in terms of load balancing, containerization, etc. that makes it all way more complicated at the enterprise level\n\nSo if you're administrating a server yourself, it's probably a good idea to start with a single instance (and run it under a supervisor like pm2) then scale it up as necessary\n\nBut this is also one of those questions where if you have to ask it, you're probably not ready yet. At this stage, you probably just want to get a proof of concept up on Heroku so you can get more buy-in from your organization and then you can come up with a road map for transforming it to an enterprise scale application.\n\nPlus, there's a lot more to managing an enterprise scale app than just deploying it so you'll want to get those ducks in a row as well.", "source": "reddit", "embedding": [], "label": 1}, {"body": "Good read by @AzureDevOps | Automating Infrastructure Deployments in the Cloud with #Ansible and #Azure #Pipelines https://t.co/cTSjRe36cL", "source": "twitter", "embedding": [], "label": 1}, {"body": "@AmazonHelp @amazon Also, let my friend who works in AWS security know - would hate to see this become a widespread breach that wasn't reported by customer service. Tks!", "source": "twitter", "embedding": [], "label": 1}, {"body": "How to avoid getting sued in your Oracle-to-the-cloud migration https://t.co/u7QpK3ZU5P via @techrepublic 73% of respondents in TechRepublic's Managing the Multicloud survey cited lock-in as a worry for their cloud deployments.", "source": "twitter", "embedding": [], "label": 1}, {"body": "I just moved an app from AWS to GCP and didn't have to change any of the application code. What's vendor lock-in?", "source": "twitter", "embedding": [], "label": 1}, {"body": "@ianmiell My new place is a GCP shop. Shows you how the UX for most thing on AWS really sucks.", "source": "twitter", "embedding": [], "label": 1}, {"body": "flagger - Progressive delivery Kubernetes operator (Canary, A/B Testing and Blue/Green deployments) https://t.co/DR4Wkzohm7", "source": "twitter", "embedding": [], "label": 0}, {"body": "[compile it by hand?](https://openfoam.com/download/install-source.php)  I hate Docker.", "source": "reddit", "embedding": [], "label": 0}, {"body": "Since it\u2019s a CSV are you sure it does not matter where exactly the string is?\nFunny, I recently needed to do a very similar thing and desperately wanted an excuse to do it in Racket ;) But I ended up loading the data to AWS Athena and doing a few-second query... ;/ Life sucks.", "source": "reddit", "embedding": [], "label": 0}, {"body": "Entry level DevOps job? -- I have an interview coming up with a company. Their job posting seemed a bit lacking the qualifications area and I\u2019m just wondering what the expectations might be. Would his be considered an entry level position?\n\nThe title is infrastructure engineer. I'm currently a Systems Engineer with a lot of experience in the Microsoft stack and looking to branch out, I've used Linux distros on and off for a while so I feel like that qualification isn't too difficult to meet.\n\n\u200b\n\nWhat we want you to do:\n\nYou will be a member of our globally distributed public sector operations team splitting your time between unplanned incident or internal support work and planned projects from our the current sprint. Typical work involves troubleshooting application instances, resizing containers, improving automation for deployments, patching, security compliance, and much more. We work with technologies like Puppet, AWS, and terraform. Our environment consists of cloud deployments.\n\nBasic Qualifications:\n\n\u2022 3+ years experience with Linux (Red Hat/CentOS preferred) Preferred Qualifications:\n\n\u2022 Work really well with a bunch of brilliant people around the world on interesting tech\n\n\u2022 You\u2019re very technically curious and whenever you can, you self-learn technologies that interest you\n\n\u2022 Really good at finding problems and fixing them, even when there is an outage, and the pressure is on Experience and/or a serious interest to learn one or more of the following is very valuable;\n\n\u2022 Coding against API\u2019s for infrastructure automation\n\n\u2022 Continuous integration and automated deployment techniques\n\n\u2022 AWS\n\n\u2022 CI/CD in platforms like Teamcity and Gitlab\n\n\u2022 Running applications in the JVM and reading\n\n\u2022 Monitoring tools such as Sensu, Nagios, Splunk, Grafana \u2022 Relational databases (MariaDB, RDS)\n\n\u2022 Networking and Load Balancing (F5, HAProxy)", "source": "reddit", "embedding": [], "label": 0}, {"body": "I would suggest something else. \nRPI makes an awful platform for someone new. The dreadful slow boot times will annoy you very quickly. Once you have a working config, by all means move it to PI for live use. However most will quickly out grow it. I dropped the PI after about two hours and switched to Docker on my NAS and it was a world of difference. The Pi is now used for others things it is more suited for.", "source": "reddit", "embedding": [], "label": 0}, {"body": "Just catching up on the @VMworld keynote from yesterday, #VMwareTanzu #ProjectPacific kubernetes running on @VMwarevSphere with a 8% performance increase OVER bare metal deployments\u2026 just wow! #vExpert", "source": "twitter", "embedding": [], "label": 1}, {"body": "\"The emergence of Kubernetes as a leader for multi-cloud consistent deployments has created a need for a consistent storage backend, and Pure Storage is stepping up to the challenge.\" - @Ned1313 via @GestaltIT  https://t.co/NNQZExF8Ha https://t.co/Ko2ofmkrGI", "source": "twitter", "embedding": [], "label": 1}, {"body": "Unlike any other Kubernetes security solution that can't extend across clusters &amp; IP domains, Aporeto offers a #ZeroTrust turn-key enterprise SaaS solution that works well for multi-cluster #Kubernetes deployments. Register for a FREE Trial today!: https://t.co/Jx32ONP44i https://t.co/6nJZRZy5bD", "source": "twitter", "embedding": [], "label": 1}, {"body": "Which is your favorite Linux Desktop and why ? -- **1)** Which is your favorite Linux Desktop and why ?\n\n**2)** Do you love or hate systemd and do you feel the controversy is over now ? do you miss the old day or you prefer it now ?\n\n**3)** What you run at your job Centos/RedHat or Ubuntu or something else ? Which you prefer or feel is more powerful / stable ?\n\n**4)** Can you do all the same advanced things in AWS with Linux than you can with Azure in term of features set, programming, iso image etc etc ?\n\n**5)** What's the best Alternative in the Linux world to a Office 365 cloud setup ?", "source": "reddit", "embedding": [], "label": 1}, {"body": "Episode 476 - Serverless And Container Deployments, What Are They. https://t.co/4fNXDDGTGy\n\nSecurity in 5 podcast.", "source": "twitter", "embedding": [], "label": 1}, {"body": "We have used RightScale for cross-cloud provisioning and a single pane of glass. Let me tell you it does as good of job as a product like that can but the technologies are too different to lump them all together. Like how do you correlate a storage platform like Amazon EBS with a VMware Datastore with a Azure Managed Disk. It's really hard to treat everything the same. Even networking like NSX vs AWS Security Groups. We ended up having to write too much custom code to get the platform to do exactly what we wanted we might as well have just written our deployment  from scratch calling the different cloud APIs.\n\nHappy to answer any further questions but my high level advice is that if you deployments are anything other than SUPER basic you're probably better off writing your own deployment mechanism.", "source": "reddit", "embedding": [], "label": 0}, {"body": "@ErrataRob Ohhhhh ... ok. That fills in a gap in my knowledge. I hate the history of browsers and their impact on productivity. If there is connectionless and serverless, then there should also be browserless.", "source": "twitter", "embedding": [], "label": 1}, {"body": "@6b766e I haven't had an opportunity to try it yet but bazel has rules to build Docker images in a reproducible manner. (the fact that 99% of Dockerfiles start with `apt-get update` is just awful.)", "source": "twitter", "embedding": [], "label": 1}, {"body": "Kubernetes is more than an orchestrator, it is an ecosystem of operators, extensions and librarys allowing to tailor deployments to your platform of choice. @samcogan shows ways you can enhance Kubernetes clusters to work and integrate better with #Azure.\n\nhttps://t.co/cPvo4qQvrB https://t.co/vQpYcOFyHt", "source": "twitter", "embedding": [], "label": 1}, {"body": "Looking for affordable and scalable Firebase serverless replacement -- I really like Firebase and all the services they offer, but my main concern is about the vendor lock-in and not having more control of the database. Also when the usage grows it could be more expensive than having my own server.\n\nCurrently I been using Firebase for [my first app](https://play.google.com/store/apps/details?id=co.getboosted.emprende), and everything works fine, since is a small app, but for my next project Im really considering this things since it will require much more server usage.\n\nLooking in internet I found [Parse](https://parseplatform.org/) and [Back4app](https://www.back4app.com) so I want to know other developers experience with Parse-Flutter and if I can have the same functionality, Im interesting in the following ones:\n\n* firebase\\_analytics\n* cloud\\_firestore\n* firebase\\_crashlytics\n* firebase\\_remote\\_config\n* firebase\\_admob\n* firebase\\_messaging\n* cloud messaging\n* authentication\n* A/B testing\n* Dynamic links / deep linking\n\nIf there is another options, I'm open to suggestions.", "source": "reddit", "embedding": [], "label": 1}, {"body": "@thekonginc micro services mean multiple-types-of-servers into one app, more directly, mixed types of deployments into one---where and why Kubernetes is here!", "source": "twitter", "embedding": [], "label": 1}, {"body": "Amazon Glacier \"Deep Archive\" setup: ELI5? -- I am a video editor that is currently archiving client projects to bare hard drives, as well as redundant LTO tapes. Because my physical space for keeping all this stuff is closing in on me, I'd like to use Amazon Glacier Deep Archive for this stuff instead. Because I just need an offsite backup for terabytes of stuff that I would almost never need to access, except in a data recovery situation, it seems like a perfect solution. \n\nI signed up for an AWS account, thinking that it would be simple to setup Glacier Deep Archive, but I was surprised at just how goddamned complicated it is. All I want to do is set up deep archives for each individual client of mine, and then upload to GDA whenever I need to archive a new project, using something like rclone or even a GUI app like Chronosync or Transmit (I'm a macOS user). But there are so many switches and knobs on the Glacier setup stuff that I have no idea if I'm doing it right or wrong. I tried doing a test upload to a bucket I created, and it said it uploaded fine, but when I tried to access it with another app, the bucket/files I uploaded were nowhere to be found.\n\nAm I missing something here? Can someone offer a simple layperson's walkthrough on how to use Glacier Deep Archive? I don't need any of the complicated enterprise stuff. I just need to dump a crapload of data to a cloud backup, set it and forget it style.", "source": "reddit", "embedding": [], "label": 1}, {"body": "Deploying with Confidence \u2014 Minimize Risk, Maximize Resiliency With Canary Deployments on AWS https://t.co/aorc4KO9iM #aws #cloudcomputing #devops", "source": "twitter", "embedding": [], "label": 0}, {"body": "Ok, AWS ECS... your error messages are tantalizingly frustrating. \n\n\"service ... was unable to place a task because no container instance met all of its requirements. Reason: No Container Instances were found in your cluster. \"\n\nWhat requirements? Where? And yes there are. https://t.co/T34BrmRwh3", "source": "twitter", "embedding": [], "label": 1}, {"body": "Cool demo of @Workshare multi-cloud integration supporting the @netdocuments Zero-foot desktop to speed deployments. This is doing real-time browser only document comparison. Time saver. #ILTACON19", "source": "twitter", "embedding": [], "label": 0}, {"body": "I just ran into this problem yesterday, I\u2019m using next.js (you said next and nuxt so not sure which you are using). The other people that commented don\u2019t understand what your issue is.\n\nI honestly don\u2019t know how to fix this, I thought about this for hours yesterday and asked a few people I work with and nobody really understood what I was asking lol. I\u2019m just going to go with docker swarm to handle all of my networking. Obviously there is a solution to this but I don\u2019t know how to ask the question correctly to find how people actually handle this.\n\nHere\u2019s some of the shit I read yesterday:\n\nUse relative paths for your api calls and let the reverse proxy sort it out\n\nSeparate builds for separate environments\n\nToken replacement during the release\n\nCreate an api that figures out your host and sends you back the info you want depending on which environment/host it\u2019s run in\n\nI hate all of those", "source": "reddit", "embedding": [], "label": 1}, {"body": "Project Nebula is a new solution for simplifying cloud-native deployments. If you're looking to build workflows to meet your deployment scenarios or combine forces with tools that overlap with its goals and capabilities. Come chat with us! https://t.co/JcT083KjGb https://t.co/oOkQziz6vh", "source": "twitter", "embedding": [], "label": 1}, {"body": "The servers are AWS, so the better question to ask is how are Amazon's cloud services set up. But..\n\nThe number of 'servers' varies with demand.  There could be 1, there could be 1000.  \n\nThey are at least somewhat region based, but not sure about country.  You can bypass that by joining other people's games.\n\nLocation is likely IP based, and send you to the closest servers.  That is a bit fuzzy though since we don't know exactly how Amazon handles things.\n\nI don't think blocking prevents you from joining a server that the person is on, but I haven't tested that or heard of anyone else testing.  It would be hard to test for sure unless you get lucky (?) and join one with a blocked person.\n\nYou don't run out of servers.  You get put in a random server (based on IP/location).  You can hop 20 different servers, then rejoin the same one 3x in a row.  The busier your area is, the less likely repeats will happen.  But they do happen.\n\nI hop 2-3 times an hour when I'm not up to something in particular.  No hate here.", "source": "reddit", "embedding": [], "label": 1}, {"body": "I deployed it to AWS with serverless. It is not super complicated but I am proud of it! I wasn\u2019t sure if the best place to share so I thought I\u2019d try here.", "source": "reddit", "embedding": [], "label": 1}, {"body": "Thanks, but unfortunately I am not familiar with Docker Swarm. I just install my software into containers, then run them as needed. We use automation extensively, though maybe not in the same fashion you are describing. We have long workflows that need to run through series of tasks in a directed manner (using directed acyclic graph); task A output becomes task B input, task B output becomes input for tasks C, D, E, tasks C &amp; D output get aggregated and compared to E, etc.. Each task is configured to use its own container because each is running programs that require a different software stack. This is all orchestrated by Nextflow, and the actual tasks are submitted to the HPC cluster via SLURM which allocates the resources needed to run each task. Our SLURM cluster is not quite as large as that Wikipedia one, usually about 40-60 nodes (40CPU/300GB memory). SLURM is supposed to load balance in order to optimize resource usage over the tasks to run. It sounds like those kinds of server setups might not be as easy to use with SLURM though. Another 'automation' task I run frequently is for syncing data between storage locations,  just using a crontab that runs a Nextflow workflow that runs `rsync` on an ever-growing list of dirs from some input location, to copy new results to a different NFS SMB network drive, it gets complicated due to the need for pre-emptively detecting and fixing messed up Linux permissions before trying to transfer to SMB, etc., then running all the rsyncs in parallel in a controlled fashion (e.g. 10 at a time). \n\nOn the other hand, it sounds like Kubernetes is just loading a container somewhere and... thats it?", "source": "reddit", "embedding": [], "label": 1}, {"body": "I don't know much about the other systems you've mentioned, but can compare docker swarm with Kubernetes if it helps.\n\nDocker Swarm is much more focused on the machines than the cluster. It is great for quick and dirty with less optimization and automation support. Though you can get a lot of the same functionalities that you can in Kubernetes, it really can't handle orchestrating tens of thousands of containers efficiently.\n\nWhere Kubernetes really shines is that it can 'see' data throughout a cluster about deployments, resources, and custom metrics. This allows Kubernetes to make 'smarter' decisions and increase potential for automation. One example of a big company doing this is WikiMedia, owners of Wikipedia. They manage over 1,200 servers across two data centers to support 16 different brands, including one of the highest trafficked websites of all time with 4 engineers... And I am pretty sure that is a payroll of 4 engineers, not 4 on the clock!\n\nUnless you intend to heavily rely on automation or scalability it might be a little overkill for your project, but the conversion from swarm to Kubernetes is pretty easy overall.", "source": "reddit", "embedding": [], "label": 1}, {"body": "Serverless.yaml local vs dev AWS SQS -- So I'm writing a simple producer lambda function that should listen for an API call, and write to an SQS queue. I'd like for the serverless.yaml to create the queue if it doesn't already exist, so I have the following in my serverless.yaml file:\n\nresources:\n  Resources:\n    QuickQueue:\n      Type: \"AWS::SQS::Queue\"\n      Properties:\n        QueueName: \"QuickQueue\"\n\nThis works great for whenever I deploy it to lambda. However, when I try to test locally, obviously there's no SQS. Is there a way I can say \"if local, go to this pre-defined arn?\" I know I could break it down by stage and deploy all the SQS instances and throw them in the yaml and do it that way, but I'd like to have it be able to create the SQS instance for deployments, and just use an ARN reference locally. Any smart way of doing that? Thanks!", "source": "reddit", "embedding": [], "label": 0}, {"body": "All of this was pretty much my experience, too, but I ended up leaning on our cloud engineer people for Docker support. \n\n&gt; It pairs nicely with PlumbR to create REST API endpoints.\n\nSo much this. Makes it easy to get a model into production pretty quickly. If I have a container on an ECS cluster or Fargate or wherever DevOps wants to put it, they can easily hit that endpoint and pull the return into the apps they're building.\n\n&gt; I have no interest in Data Engineering work unless I absolutely have to.\n\nIt's remarkably frustrating sometimes, but I really like learning the infrastructure. Fucking hate having to write Terraform, though. I think it's something that our DevOps department should do but if I open a Jira request for assistance, it'd take weeks before they'd even look at it. I've just taken it upon myself to build out my own environments as best I can then make one ticket that says \"all this is ready for deployment. Review, please, and get it on AWS so it's useful.\"", "source": "reddit", "embedding": [], "label": 1}, {"body": "#VMware expands security tools for public cloud deployments with #Intrinsic buy #AWS #Azure #GCP @chriskanaracus  https://t.co/9cylCROpOB", "source": "twitter", "embedding": [], "label": 0}, {"body": "@Lun_rLambda I really hate it when all my serverless functions are made of fake code", "source": "twitter", "embedding": [], "label": 1}, {"body": "We have built some of the world\u2019s largest #RealTime #data processing #pipelines and have expertise across #AWS and #OpenSource #technologies. We can plumb together the most complicated data systems to provide data directly to the hands of #BusinessUsers.\n\nhttps://t.co/rtKYvmptHd https://t.co/DKu0V1DSTp", "source": "twitter", "embedding": [], "label": 0}, {"body": "Awful, they are very expensive for what is essentially a pretty AWS wrapper. for the (very) high cost you do get a company advisor, who comes and says hello once a year and tries to upsell stuff you don't want.\n\nEnded up hiring someone who just manages the hosting in-house, who setup and maintains a similar AWS setup, somehow this worked out cheaper - so not sure what's going on with the economy of scale.\n\nWe are however a small company (12 devs), I can see why a much larger company might want to fork over the extra costs to have a hosting provider who understands drupal and how to maintain/upate it.", "source": "reddit", "embedding": [], "label": 1}, {"body": "@alexellisuk - I\u2019m looking at using an iPad for everything and need a remote host that isn\u2019t running all the time.\n- I hate running docker locally and want a remote build host.", "source": "twitter", "embedding": [], "label": 1}, {"body": "Multicloud - Welcome to the lowest-common-denominator cloud.  But feel good, you're preventing \"lock-in\" by owning those 2 phones. \ud83d\ude06 https://t.co/q4QxuIwj3T", "source": "twitter", "embedding": [], "label": 1}, {"body": "I am kinda in the same boat because i failed the a+ test last time i took it.  It sucks because i am not interested in that stuff anymore and its just really out dated material that no one needs to know.  No one needs to know how to build computers anymore, its utterly pointless in my opinion.  So even though I can build a computer from scratch and.... lol i just ended my rant.\n\nLong story short i think i am just gonna restudy for A+, because honestly that is probably much easier than tackling something like AWS that i know almost nothing about at this point.", "source": "reddit", "embedding": [], "label": 0}, {"body": "How do you fight vendor lock-in? In most of the cases, you fight it the same way you fight monsters under your bed. The first step is to face your fears, and give them the right name. In the cloud, lock-in is simply a switching cost. https://t.co/Ndd6l5snaA via @slackvacation", "source": "twitter", "embedding": [], "label": 1}, {"body": "Simplify deployments with @ArcGISXprise #Cloud Builder for @awscloud https://t.co/8kLaImgvlb \n\n#ArcGISEnterprise #ArcGISAdmin #AWS #CIO #CTO #GIO #tech #govtech #IT #esri #arcgis #WebGIS #GIS @Esri @EsriFederalGovt @EsriSLGov @EsriPartners https://t.co/Zcsp3XXPlv", "source": "twitter", "embedding": [], "label": 1}, {"body": "IBM's Mahmoud Elmashni shares how companies can modernize with multicloud and hybrid cloud deployments powered by open and secure application development https://t.co/VFkKQp8wdf", "source": "twitter", "embedding": [], "label": 0}, {"body": "I learned a lot of AWS ECS today. What an useful service; and another great way to vendor lock-in.", "source": "twitter", "embedding": [], "label": 1}, {"body": "Big brands hate being shown in a bad light so talking about boycotting them is effective in putting pressure on them. Boycotting is not so much about the direct economic pressure but about negative publicity. To put it another way- talking about boycotting is more important than boycotting. (also I don't buy any of the brands anyway - except I do use AWS).\n\nIt is possible to attempt to buy ethically - and the attempt to buy ethically is more about the statement than about the action.", "source": "reddit", "embedding": [], "label": 1}], "num_data_points": 188, "id": "08dfcc82-274c-41b6-a013-e80d70f3c57e"}